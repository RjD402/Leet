7)Checking Whether K-th Bit is Set or Not
n & (1 ≪ K -1). If the expression is true then we can say the Kth bit is set

8)Setting K-th Bit: n | 1 ≪ (K – 1)

9)Clearing K-th Bit : n & ~(1 ≪ K – 1)

10)Toggling K-th Bit : n ^(1 ≪ K – 1)

11)Toggling Rightmost One Bit : n & n – 1

12)Isolating Rightmost Zero Bit : ~n & n + 1

13)Checking Whether Number is Power of 2 or Not : if(n & n – 1 == 0)

14)Multiplying Number by Power of 2 :
to multiply the number with 2K we can use the expression: n ≪ K

15)Dividing Number by Power of 2 :
divide the number with 2K we can use the expression: n ≫ K

16)Performing Average without Division
We can use mid = (low + high) >> 1. Note that using (low + high) / 2 for midpoint calculations
won’t work correctly when integer overflow becomes an issue. We can use bit shifting and also
overcome a possible overflow issue: low + ((high – low)/ 2) and the bit shifting operation for
this is low + ((high – low) >> 1)